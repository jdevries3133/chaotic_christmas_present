import os
from pathlib import Path

from django.conf import settings
from django.core.management.base import BaseCommand, CommandError
import markdown


# TODO: implement a --unsafe flag or similar to overwrite in the case of
# naming conflicts. For now, just raise an exception.

class Command(BaseCommand):

    def __init__(self, *a, **kw):
        super().__init__(*a, **kw)
        self.app_base_dir = Path(settings.BASE_DIR, 'staff')

    help = (
        """
        Iterate over markdown files in staff/markdown/intermediary/path/file.md,
        render them as html, and put the html snippets into templates within
        staff/templates/intermediary/path/file.html

        After running this, you can simply include the markdown files in
        html templates as if they were written in html to begin with.

        Note that for styling, the rendered markdown is wrapped with a <div>
        with the class ".staff__markdown." Also note that template tags are
        not available in markdown files, this is just for easy rendering of
        literal content.
        """
    )

    def handle(self, *args, **options):
        # TODO: make this work recursively for all dirs under /markdown,
        # dumping generated markdown into /templates


        # TODO: raise an exception if there is a naming conflict as
        # described below:
        """
        If a template is already in the templates folder with the target file
        name of the markdown currently being rendered, it should only
        be overwritten if it appears to be a previously generated markdown file.

        Otherwise, an exception will be raised to avoid overwriting genuine
        templates.
        """




        sourcepath = Path(self.app_base_dir, 'markdown', 'a', 'a1.md')
        with open(sourcepath, 'r') as f:
            md = f.read()
        html = (
            r'{% comment AUTOMATICALLY GENERATED by "manage.py rendermarkdown" %}'
            '\n'
            f'{{% comment Do not edit this file. Edit it\'s markdown source at {sourcepath} %}}\n'
            r'{% comment Because this is now a template, you can use it simply with {% include \'this\' %} %}'
            '\n'
            f'<div class="staff__markdown">\n{markdown.markdown(md)}\n</div>'
        )
        htmltargetpath = Path(self.app_base_dir, 'templates', 'a', 'a1.html')
        os.makedirs(htmltargetpath.parent)
        with open(htmltargetpath, 'w') as htmltarget:
            htmltarget.write(html)
